name: octoo-static
runtime: yaml
description: OCTOO Svelte Skeleton Static AWS deployment
# Import the program's configuration settings.
config:
  errorDocument:
    type: string
    default: error.html
  indexDocument:
    type: string
    default: index.html
  path:
    type: string
    default: ../build
  domain:
    type: string
variables:
  zone:
    fn::invoke:
      function: aws:route53:getZone
      arguments:
        name: ${domain}
# Export the URLs and hostnames of the bucket and distribution.
outputs:
  cdn-hostname: ${cdn.domainName}
  cdn-url: https://${cdn.domainName}
  origin-hostname: ${bucket.websiteEndpoint}
  origin-url: http://${bucket.websiteEndpoint}
  url: https://${domain}
  www-url: https://www.${domain}
resources:
  # Create a DNS A record to point to the CDN.
  ${domain}:
    type: aws:route53:Record
    properties:
      name: ${domain}
      zoneId: ${zone.zoneId}
      type: A
      aliases:
        - name: ${cdn.domainName}
          zoneId: ${cdn.hostedZoneId}
          evaluateTargetHealth: true
    options:
      dependsOn:
        - ${certificate}
  www.${domain}:
    type: aws:route53:Record
    properties:
      name: www.${domain}
      zoneId: ${zone.zoneId}
      type: A
      aliases:
        - name: ${cdn.domainName}
          zoneId: ${cdn.hostedZoneId}
          evaluateTargetHealth: true
    options:
      dependsOn:
        - ${certificate}

  us-east-provider: # ACM certificates must be created in the us-east-1 region for CDN
    type: pulumi:providers:aws
    properties:
      region: us-east-1
  certificate:
    type: aws:acm:Certificate
    properties:
      domainName: ${domain}
      validationMethod: DNS
      keyAlgorithm: EC_prime256v1
      subjectAlternativeNames:
        - www.${domain}
    options:
      provider: ${us-east-provider}
  # Validate the ACM certificate with DNS.
  certValidation-root:
    type: aws:route53:Record
    properties:
      name: ${certificate.domainValidationOptions[0].resourceRecordName}
      type: ${certificate.domainValidationOptions[0].resourceRecordType}
      zoneId: ${zone.zoneId}
      ttl: 60
      records:
        - ${certificate.domainValidationOptions[0].resourceRecordValue}
    options:
      dependsOn:
        - ${certificate}
  certValidation-www:
    type: aws:route53:Record
    properties:
      name: ${certificate.domainValidationOptions[1].resourceRecordName}
      type: ${certificate.domainValidationOptions[1].resourceRecordType}
      zoneId: ${zone.zoneId}
      ttl: 60
      records:
        - ${certificate.domainValidationOptions[1].resourceRecordValue}
    options:
      dependsOn:
        - ${certificate}
  certCertificateValidation:
    type: aws:acm:CertificateValidation
    properties:
      certificateArn: ${certificate.arn}
      validationRecordFqdns:
        - ${certValidation-root.fqdn}
        - ${certValidation-www.fqdn}
    options:
      provider: ${us-east-provider}
  # Create an S3 bucket and configure it as a website.
  bucket:
    properties:
      website:
        errorDocument: ${errorDocument}
        indexDocument: ${indexDocument}
    type: aws:s3:Bucket
  # Use a synced folder to manage the files of the website.
  bucket-folder:
    options:
      dependsOn:
        - ${ownership-controls}
        - ${public-access-block}
    properties:
      acl: public-read
      bucketName: ${bucket.bucket}
      path: ${path}
    type: synced-folder:index:S3BucketFolder
  # Create a CloudFront CDN to distribute and cache the website.
  cdn:
    properties:
      customErrorResponses:
        - errorCode: 404
          responseCode: 404
          responsePagePath: /${errorDocument}
      defaultCacheBehavior:
        allowedMethods:
          - GET
          - HEAD
          - OPTIONS
        cachedMethods:
          - GET
          - HEAD
          - OPTIONS
        compress: true
        defaultTtl: 600
        forwardedValues:
          cookies:
            forward: all
          queryString: true
        maxTtl: 600
        minTtl: 600
        targetOriginId: ${bucket.arn}
        viewerProtocolPolicy: redirect-to-https
      enabled: true
      origins:
        - customOriginConfig:
            httpPort: 80
            httpsPort: 443
            originProtocolPolicy: http-only
            originSslProtocols:
              - TLSv1.2
          domainName: ${bucket.websiteEndpoint}
          originId: ${bucket.arn}
      priceClass: PriceClass_100
      restrictions:
        geoRestriction:
          restrictionType: none
      aliases:
        - ${domain}
        - www.${domain}
      viewerCertificate:
        cloudfrontDefaultCertificate: false
        acmCertificateArn: ${certificate.arn}
        sslSupportMethod: sni-only
    type: aws:cloudfront:Distribution
    options:
      dependsOn:
        - ${certCertificateValidation}
  # Assign ownership controls to the new S3 bucket
  ownership-controls:
    properties:
      bucket: ${bucket.id}
      rule:
        objectOwnership: ObjectWriter
    type: aws:s3:BucketOwnershipControls
  # Configure the public access block for the new S3 bucket
  public-access-block:
    properties:
      blockPublicAcls: false
      bucket: ${bucket.id}
    type: aws:s3:BucketPublicAccessBlock
